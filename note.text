Packages in Python treat as dependencies
but in Java is only like folder
--------------------------------------
pip - The Python Package Installer
you can import any packages by clicking on Python package
------------------------------------
in paython we do not have a default value
so any where in funtion you need default value you need to set by your self
---------------------------------------
# if you have two tuples that the same contents  we use '=='
# if you have two tuples that referencing to the same object we use 'is'
# in java was different to see two data referencing to the same object we use ==
-----------------------------------------------------------------------------------
-> in java import was using to import class
-> in Paython you can import module and the packages
-> each package in Paython has a constractor __init__.py
-> for module you can just create Directory
------------------------------------
Access Modifier:
just the function name without any _ : public
function name wit one _ : protected
function name wit two __ :  private
-----------------------------------------
in Java constractor is for instantiating the object and setting the instance variable
in Paython constractor is for instantiating the object and setting the instance variable as well as declaring the instance variable
----------------------------------------------------------
'self' keyword which act as 'this' keyword also is use for declaring instance variable ( self.name = name)
self is for accessing the instance variable
---------------------------------------------------
creating object --> dog1 = Dog('Lucy', 'Husky', 4 , 'White')
                reference name = class name (argument of constractor : name ,breed ,age, color)
--------------------------------------------
->Build-in __init()-- method used for defining & initializing the attributes("constractor")
->Belongs to the object, and object has its own memory
-> Get executed when and object is created from the class
---------------------------------------------------------
in Python there is no STATIC variable like java
how ever there is way to achieve similar to treat as static
---->you can called the through the class not inside the constractor
class Employee:
    is_human =True --> this is static variable

    def __init__ (self,name,salary):
    self.name --> instance variable

----------------------------------------------------------

in java we had toString method : that is for allow me to get string version of the object
so if we do not have this toString method we will get hash code

in Python to prevent to get the hash code we can use __str__() method
Build-in __str__() method is used for controlling what should be return when the class object is represented as a string
-------------------------------------------------------------------
only when we have inheritance protected will acceptable out side the class
---------------------------------------------------------------
            Class                       vs                      Object

Class is a collection of similar object                 Object is an instance of a class

class is conceptual(is a template)                      Object is real

NO memory is allocated for a class                      Each object has its own memory

Class can exist without any objects                      Object can not exist without a class
----------------------------------------------------------------------------------------------
'tuples' is one of the data structure in "Paython" like 'array' in "Java"
---------------------------------------------------------------------------------------------

# we can convert list to tuple and tuple to list but not Dictionary because its collection of pairs!

-----------------------------------------------------------------------------------------------------

memory allocation for tuple  --> if you have multiple tuple that have exact same contents only one object will be allocated

but when you have multiple list of objects that has the same contents  each object will be located separately in the Python memory
--------------------------------------------------------------------------------------------------------- -
                                                       Encapsulation :

An object hides its internal data from code that's outside the class
Hide an attribute by giving private access modifier and making the methods that access those fields public
getter and setter
            public
            protected (_)
            Private (__)
------------------------------------------------------------------------------------------------------------
generating getter and setter :

                     @property
  from code / insert live Temple (ctrl + j ) --> ask which short cut you looking for --> prop  (property getter/setter)

      @property
      def person_name(self):
        if self.__name is None or self.__name == '' or type(self.__name) != str:
            raise RuntimeError(f'Invalid name has been set: {self.__name}')
        return self.__name


      @person_name.setter
      def person_name(self, name):
        if type(name) != str:
            raise RuntimeError(f'Person name must be string')

        if name == '':
            raise RuntimeError(f'Person name can not be empty')

        self.__name = name
but out side the class person_name will have a variable
then inside the constractor we add them like :self.person_name = name
  -----------------------------------------------------------------------------------------------
--------------------------------------  Inheritance ---------------------------------------


is A relationship ---> the common field can store in one class and with inheritance apply to other class
 in java we have Extend but in Python just add it inside   (     )   class Dog (Animal):

 one and more classes can be inherited by a class by specifying the parent classes in parentheses after the class name
  Dog (Animal ,another parent class ,another parent class , ... ) so we do not have interface in Python

  all the private method or variable are not inherited Constructors are not inherited

  in java was Super keyword in Python we have super() to call a super class constructor and methods
  super ()   -> access the parent class members
  super().__init__(self,name,gender,...)

                                Type of inheritance
  1- single inheritance
  2- hierarchical inheritance
  3- multilevel inheritance
  4-multiple inheritance  (Java did not support this one )


  --------------------------------------------------------------------------------------------------

-----------------------------------Abstraction -------------------------------------------


-->hiding the implementation details of function from the user only the functionality will be provided to the user

--> method without body in Parent class and BE MUST FOR CHILD CLASS TO IMPLEMENTED ABSTRACT METHOD (in JAVA) but Python is optional add method with body in child class

two way to achieve Abstraction :

1- The base class : include common properties and methods of sub classes what will inherit, common methods will be declared without any implementations

2- The Abstract class: a class that inherits the ABC class , and it includes abstract methods that must be implemented by subclass, the class can not be instantiate

----------------------------Regular class in Python can achieve abstract class----------------

 1- by giving pass keyword inside method make it optional abstraction
 2-to be must abstraction   --> need    --> abc: module name (built in module)  ABC: Abstract class in abc module and for methods @abstractmethod
----------------------------------------------------------------------------------
 # right click /Generate /implement methods
 ------------------------------------------------




